
#include <iostream>
#include <algorithm>
using namespace std;

struct TreeNode {
    int data;
    TreeNode* left;
    TreeNode* right;
};

TreeNode* createNode(int data) {
    TreeNode* newNode = new TreeNode();
    newNode->data = data;
    newNode->left = newNode->right = nullptr;
    return newNode;
}

TreeNode* insert(TreeNode* root, int data) {
    if (root == nullptr) {
        return createNode(data);
    }
    if (data < root->data) {
        root->left = insert(root->left, data);
    } else if (data > root->data) {
        root->right = insert(root->right, data);
    }
    return root;
}

int height(TreeNode* root) {
    if (root == nullptr){
        return -1; // Height of an empty tree is -1
    }
    int leftHeight = height(root->left);
    int rightHeight = height(root->right);
    return 1 + max(leftHeight, rightHeight); // Height of the current node is max of left and right subtree heights + 1
}

int main() {
    TreeNode* root = nullptr;
    int numNodes, nodeData;
    cin >> numNodes;
    // Insert nodes into the BST
    for (int i = 0; i < numNodes; i++) {
        cin >> nodeData;
        root = insert(root, nodeData);
    }
    // Calculate the height of the BST
    int treeHeight = height(root);
    cout << treeHeight+1;
    return 0;
}


